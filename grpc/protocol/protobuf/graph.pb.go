// Code generated by protoc-gen-go. DO NOT EDIT.
// source: graph.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type GraphQueryInfo struct {
	S2SInfo              *S2SInfo   `protobuf:"bytes,1,opt,name=S2SInfo,proto3" json:"S2SInfo,omitempty"`
	Indegree             []*S2SInfo `protobuf:"bytes,2,rep,name=Indegree,proto3" json:"Indegree,omitempty"`
	Outdegree            []*S2SInfo `protobuf:"bytes,3,rep,name=Outdegree,proto3" json:"Outdegree,omitempty"`
	Clients              []*C2SInfo `protobuf:"bytes,4,rep,name=Clients,proto3" json:"Clients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GraphQueryInfo) Reset()         { *m = GraphQueryInfo{} }
func (m *GraphQueryInfo) String() string { return proto.CompactTextString(m) }
func (*GraphQueryInfo) ProtoMessage()    {}
func (*GraphQueryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{1}
}

func (m *GraphQueryInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphQueryInfo.Unmarshal(m, b)
}
func (m *GraphQueryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphQueryInfo.Marshal(b, m, deterministic)
}
func (m *GraphQueryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphQueryInfo.Merge(m, src)
}
func (m *GraphQueryInfo) XXX_Size() int {
	return xxx_messageInfo_GraphQueryInfo.Size(m)
}
func (m *GraphQueryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphQueryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GraphQueryInfo proto.InternalMessageInfo

func (m *GraphQueryInfo) GetS2SInfo() *S2SInfo {
	if m != nil {
		return m.S2SInfo
	}
	return nil
}

func (m *GraphQueryInfo) GetIndegree() []*S2SInfo {
	if m != nil {
		return m.Indegree
	}
	return nil
}

func (m *GraphQueryInfo) GetOutdegree() []*S2SInfo {
	if m != nil {
		return m.Outdegree
	}
	return nil
}

func (m *GraphQueryInfo) GetClients() []*C2SInfo {
	if m != nil {
		return m.Clients
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "protocol.Empty")
	proto.RegisterType((*GraphQueryInfo)(nil), "protocol.GraphQueryInfo")
}

func init() {
	proto.RegisterFile("graph.proto", fileDescriptor_3e4c656902fc0e6b)
}

var fileDescriptor_3e4c656902fc0e6b = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2f, 0x4a, 0x2c,
	0xc8, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x52, 0xbc,
	0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x10, 0x09, 0x25, 0x76, 0x2e, 0x56, 0xd7, 0xdc, 0x82,
	0x92, 0x4a, 0xa5, 0x53, 0x8c, 0x5c, 0x7c, 0xee, 0x20, 0x1d, 0x81, 0xa5, 0xa9, 0x45, 0x95, 0x9e,
	0x79, 0x69, 0xf9, 0x42, 0xda, 0x5c, 0xec, 0xc1, 0x46, 0xc1, 0x20, 0xa6, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xb7, 0x91, 0xa0, 0x1e, 0xcc, 0x18, 0x3d, 0xa8, 0x44, 0x10, 0x4c, 0x85, 0x90, 0x2e, 0x17,
	0x87, 0x67, 0x5e, 0x4a, 0x6a, 0x7a, 0x51, 0x6a, 0xaa, 0x04, 0x93, 0x02, 0x33, 0x76, 0xd5, 0x70,
	0x25, 0x42, 0xfa, 0x5c, 0x9c, 0xfe, 0xa5, 0x25, 0x50, 0xf5, 0xcc, 0xb8, 0xd4, 0x23, 0xd4, 0x80,
	0x1c, 0xe3, 0x9c, 0x93, 0x99, 0x9a, 0x57, 0x52, 0x2c, 0xc1, 0x82, 0xae, 0xdc, 0x19, 0xe6, 0x18,
	0xa8, 0x0a, 0x23, 0x07, 0x2e, 0x2e, 0x84, 0x5f, 0x84, 0x8c, 0xb8, 0x58, 0x21, 0x0c, 0x7e, 0x84,
	0x16, 0xb0, 0xa7, 0xa5, 0x24, 0x10, 0x02, 0xa8, 0x7e, 0x4f, 0x62, 0x03, 0x4b, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xd5, 0xbe, 0x82, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphQueryClient is the client API for GraphQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphQueryClient interface {
	Query(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GraphQueryInfo, error)
}

type graphQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphQueryClient(cc grpc.ClientConnInterface) GraphQueryClient {
	return &graphQueryClient{cc}
}

func (c *graphQueryClient) Query(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GraphQueryInfo, error) {
	out := new(GraphQueryInfo)
	err := c.cc.Invoke(ctx, "/protocol.GraphQuery/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphQueryServer is the server API for GraphQuery service.
type GraphQueryServer interface {
	Query(context.Context, *Empty) (*GraphQueryInfo, error)
}

// UnimplementedGraphQueryServer can be embedded to have forward compatible implementations.
type UnimplementedGraphQueryServer struct {
}

func (*UnimplementedGraphQueryServer) Query(ctx context.Context, req *Empty) (*GraphQueryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterGraphQueryServer(s *grpc.Server, srv GraphQueryServer) {
	s.RegisterService(&_GraphQuery_serviceDesc, srv)
}

func _GraphQuery_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphQueryServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.GraphQuery/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphQueryServer).Query(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphQuery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.GraphQuery",
	HandlerType: (*GraphQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _GraphQuery_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graph.proto",
}
